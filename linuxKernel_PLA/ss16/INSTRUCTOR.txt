sudo apt-get install gcc build-essential

sudo apt-get install linux-headers-'uname -r'


super.c (super is derived from superblock):
		#include 
		#include 

		static int __init aufs_init(void)
		{
		pr_debug("aufs module loaded\n");
		return 0;
		}

		static void __exit aufs_fini(void)
		{
		pr_debug("aufs module unloaded\n");
		}

		module_init(aufs_init);
		module_exit(aufs_fini);

		MODULE_LICENSE("GPL");
		MODULE_AUTHOR("kmu");

Weâ€™ll write Makefile for this. It will build our module:

		obj-m := aufs.o
		aufs-objs := super.o

		CFLAGS_super.o := -DDEBUG

		all:
		    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

		clean:
		    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean


sudo insmod ./aufs.ko

lsmod | grep aufs

		(sudo rmmod aufs)


		
		static struct file_system_type aufs_type = {
		      .owner = THIS_MODULE,
		      .name = "aufs",
		      .mount = aufs_mount,
		      .kill_sb = kill_block_super,
		      .fs_flags = FS_REQUIRES_DEV, 
		  };
		  
		  
		  static struct dentry *aufs_mount(struct file_system_type *type, int flags,
                                      char const *dev, void *data)
		  {
		      struct dentry *const entry = mount_bdev(type, flags, dev,
				                                  data, aufs_fill_sb);
		      if (IS_ERR(entry))
			  pr_err("aufs mounting failed\n");
		      else
			  pr_debug("aufs mounted\n");
		      return entry;
		  }
		  
		  
		  static int aufs_fill_sb(struct super_block *sb, void *data, int silent)
		  {
		      struct inode *root = NULL;

		      sb->s_magic = AUFS_MAGIC_NUMBER;
		      sb->s_op = &aufs_super_ops;

		      root = new_inode(sb);
		      if (!root)
		      {
			   pr_err("inode allocation failed\n");
			   return -ENOMEM;
		      }

		      root->i_ino = 0;
		      root->i_sb = sb;
		      root->i_atime = root->i_mtime = root->i_ctime = CURRENT_TIME;
		      inode_init_owner(root, NULL, S_IFDIR);

		      sb->s_root = d_make_root(root);
		      if (!sb->s_root)
		      {
			  pr_err("root creation failed\n");
			  return -ENOMEM;
		      }

		     return 0;
		 }
		 
		  
First of all, we fill super_block structure. 
		  
		  static void aufs_put_super(struct super_block *sb)
		  {
		      pr_debug("aufs super block destroyed\n");
		  }

		  static struct super_operations const aufs_super_ops = {
		      .put_super = aufs_put_super,
		  };
		  
		  
		  
touch image
mkdir dir
sudo mount -o loop -t aufs ./image ./dir
sudo umount ./dir



		
		
		
ver2		Writing a Kernel Filesystem  



		struct file_system_type hellofs_fs_type = {
		    .owner = THIS_MODULE,
		    .name = "hellofs",
		    .mount = hellofs_mount,
		    .kill_sb = hellofs_kill_superblock,
		    .fs_flags = FS_REQUIRES_DEV,
		};

		const struct super_operations hellofs_sb_ops = {
		    .destroy_inode = hellofs_destroy_inode,
		    .put_super = hellofs_put_super,
		};

		const struct inode_operations hellofs_inode_ops = {
		    .create = hellofs_create,
		    .mkdir = hellofs_mkdir,
		    .lookup = hellofs_lookup,
		};

		const struct file_operations hellofs_dir_operations = {
		    .owner = THIS_MODULE,
		    .readdir = hellofs_readdir,
		};

		const struct file_operations hellofs_file_operations = {
		    .read = hellofs_read,
		    .write = hellofs_write,
		};
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
